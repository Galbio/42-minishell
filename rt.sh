#!/bin/bash

test_values=(
	"*"
	"[a-z][a-z]*"
	"[a-z][ie]*"
	"[a-z]*[j]*"
	"[a-z][a-z][j]*"
	"[o][j]*"
	"[o][b][j]*"
	"*[M]*"
	"*[Z-a]*"
	"[a-z]*"
	"*[a-z]*"
	"[[[[[[A-z]"
	"[[[[[[A-z][A-z][A-z]"
	"[a-z]*[a-z]*[a-z]*[a-z]*[a-z]*[a-z]"
	"[[[a-z]*[[[a-z]*[[[a-z]*[[[a-z]*[[[a-z]*[[[a-z]"
	"[[[a-z]****[[[a-z]****[[[a-z]****[[[a-z]****[[[a-z]**[**[[[a-z]"
	"*a-z]]"
	"[[[a-z][a-z]**[a-z][[[a-z]"
	"[[[a-z][a-z]*?*[a-z][[[a-z]"
	"??"
	"??*"
	"?*??*?"
	"[a]??*"
	"?*?*[a-z][a-z][a-z]***"
	"***[a-z][a-z][a-z]*?*?"
	"??*??*??"
	"**[a-z][a-z]*[a-z][a-z][a-z]*??*"
	"?"
	"*?"
	"*??*"
	"[A-Z]*"
	"[0-9]*"
	"[!a-z]*"
	"[!A-Z]*"
	"[!0-9]*"
	"[a-zA-Z]*"
	"[a-zA-Z0-9]*"
	"[a-z]*[0-9]*"
	"[0-9]*[a-z]*"
	"[0-9][a-z][0-9]*"
	"[a-z][ 0-9][a-z]*"
	"*[a-z]*[0-9]*"
	"*[0-9]*[a-z]*"
	"**[0-9]*[a-z]*"
	"??[0-9][a-z]??"
	"[a-z]??[0-9]?"
	"[a-z]*[0-9]?*"
	"[a-z]*[A-Z]*[0-9]*"
	"[a-zA-Z0-9][a-zA-Z0-9]*"
	"[a-zA-Z][!a-zA-Z]*"
	"[a-z]*[!a-z]*"
	"[a-zA-Z]*[!0-9]*"
	"*[!a-zA-Z0-9]*"
	"[A-Z][a-z][0-9]*[!a-zA-Z0-9]"
	"*[!A-Za-z0-9]*"
	"[A-Z]?*[0-9][a-z]*?"
	"?[a-z]?*[0-9][A-Z]*"
	"*[A-Z]*[a-z]*[0-9]*[!a-zA-Z0-9]*"
	"[[[[[[[[[]]]]]]]]"
	"[a-z][^a-z]*"
	"[0-9][^0-9]*"
	"[A-Z][^A-Z]*"
	"[a-zA-Z][^a-zA-Z]*"
	"**[a-zA-Z0-9][^a-zA-Z0-9]**"
	"?*[^[^[^a-z]"
	"[adfr?*"
	"*[adfr?"
	"[^adfr?*"
	"*[^adfr?"
	"[a-z]****??[a-z]?[^A-Z]*"
	"[a-zA-Z0-9]*"
	"[A-Za-z0-9_]*"
	"[a-z]*[0-9]*[A-Z]*"
	"[0-9a-zA-Z]*"
	"[a-z]*[A-Z][0-9]*"
	"[a-z]*[A-Z][0-9]*[a-z]*"
	"[0-9]*[A-Z]*[a-z]*"
	"[a-z]*[!a-z]*"
	"[A-Z][^a-z]*"
	"[a-z][^A-Z]*"
	"[0-9][^a-zA-Z]*"
	"[a-z]*[0-9]*[A-Z]?"
	"[a-z]*[A-Z]*[0-9]?"
	"[a-z]*[A-Z]*[0-9]*?"
	"[a-zA-Z]*[0-9][a-zA-Z0-9]*"
	"[a-zA-Z]*[^a-z]*"
	"**[a-zA-Z0-9]*"
	"**[0-9a-zA-Z]*"
	"[a-zA-Z]*[^0-9]*"
	"[a-zA-Z0-9]*[^a-z]*"
	"[a-zA-Z0-9]*[^A-Z]*"
	"[a-zA-Z]*[^0-9]*"
	"*[!a-zA-Z]*"
	"[a-zA-Z]*[0-9][^a-zA-Z]*"
	"*[0-9a-z]*[A-Z]*"
	"*[A-Z][a-z]*"
	"*[^a-zA-Z0-9]*"
	"[[[[[a-z]]]]]"
	"[[[[[[A-Z]]] ]]"
	"[^a-zA-Z]*"
	"[^0-9]*"
	"[^A-Z]*"
	"[^a-zA-Z0-9]*"
	"[[a-zA-Z0-9]*"
	"[[a-zA-Z][!a-zA-Z0-9]]"
	"*[a-zA-Z0-9][!a-zA-Z0-9]*"
	"[A-Za-z][^a-zA-Z]*"
	"[a-z][^A-Z]*"
	"[A-Z][^a-z]*"
	"[!a-zA-Z0-9]*"
	"[a-z]*[!a-zA-Z0-9]*"
	"*[!a-zA-Z0-9]*"
	"^[a-zA-Z]*$"
	"^[0-9]*$"
	"^[a-z]*$"
	"^[A-Z]*$"
	"^[a-zA-Z]*$"
	"[a-zA-Z]*[!0-9]*"
	"**[a-z]*[A-Z][0-9]*"
	"*[a-z]*[A-Z][0-9]?"
	"^$"
	"^[^a-z]*$"
	"^!*"
	"??*??[a-zA-Z]"
	"*[^a-zA-Z]*"
	"[[a-zA-Z][!A-Za-z0-9]]"
	"[[a-zA-Z0-9][!a-zA-Z]]"
	"**[a-z]*[0-9][A-Z]*"
	"**[a-zA-Z]*[^A-Za-z0-9]"
	"[[a-zA-Z][!a-z]]"
	"[[a-z][!A-Z]]"

)

passed_tests=0
total_tests=${#test_values[@]}

for input in "${test_values[@]}"; do
    expected_output=$(echo $input)
    actual_output=$(./minishell "$input")
    test_number=$((test_number + 1))
    
    if [ "$expected_output" == "$actual_output" ]; then
	passed_tests=$((passed_tests + 1))
        echo -e "\033[0;32m$test_number/$total_tests	| ✅  '$input'\033[0m"
    else
        echo -e "\033[0;31m$test_number/$total_tests	| ❌  '$input'"
        echo "   Attendu : '$expected_output'"
        echo -e "   Obtenu  : '$actual_output'\033[0m"
    fi
    sleep .01
done
echo -e "==============================================================\n"
echo -e "\033[0;32m✅ $passed_tests/$total_tests tests réussis\033[0m"

